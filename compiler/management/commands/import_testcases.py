from django.core.management.base import BaseCommand
from compiler.models import Problem, TestCase

class Command(BaseCommand):
    help = "Bulk adds hidden test cases for problems"

    def handle(self, *args, **kwargs):
        test_case_data = {
            "Two Sum": [
                ("2 7 11 15\n9", "0 1"),
                ("3 2 4\n6", "1 2"),
                ("3 3\n6", "0 1"),
                ("1 2 3 4 5\n9", "3 4"),
                ("-1 -2 -3 -4 -5\n-8", "2 4"),
            ],
            "Contains Duplicate": [
                ("1 2 3 4", "False"),
                ("1 1 2 3", "True"),
                ("", "False"),
                ("7 7 7 7", "True"),
                ("10 20 30", "False"),
            ],
            "Valid Anagram": [
                ("anagram\nnagaram", "true"),
                ("rat\ncar", "false"),
                ("a\na", "true"),
                ("abc\ncba", "true"),
                ("hello\nworld", "false"),
            ],
            "Group Anagrams": [
                ("eat tea tan ate nat bat", "[['eat','tea','ate'],['tan','nat'],['bat']]"),
                ("", "[[]]"),
                ("a", "[['a']]"),
                ("cat act dog god", "[['cat','act'],['dog','god']]"),
                ("abc bca cab", "[['abc','bca','cab']]"),
            ],
            "Top K Frequent Elements": [
                ("1 1 1 2 2 3\n2", "1 2"),
                ("1\n1", "1"),
                ("4 4 4 4\n1", "4"),
                ("1 2 3 4\n2", "1 2"),
                ("5 5 5 6 6 7\n3", "5 6 7"),
            ],
            "Product of Array Except Self": [
                ("1 2 3 4", "24 12 8 6"),
                ("1 1 1 1", "1 1 1 1"),
                ("2 3 4 5", "60 40 30 24"),
                ("0 0 0 0", "0 0 0 0"),
                ("1 2", "2 1"),
            ],
            "Valid Sudoku": [
                ("53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79", "true"),
                ("53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79", "true"),
                ("53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 5...8..79", "false"),
                ("......... ......... ......... ......... ......... ......... ......... ......... .........", "true"),
                ("1111..... ......... ......... ......... ......... ......... ......... ......... .........", "false"),
            ],
            "Longest Consecutive Sequence": [
                ("100 4 200 1 3 2", "4"),
                ("0 3 7 2 5 8 4 6 0 1", "9"),
                ("", "0"),
                ("1", "1"),
                ("1 2 3 4 5", "5"),
            ],
            "Reverse Linked List": [
                ("1 2 3 4 5", "5 4 3 2 1"),
                ("1", "1"),
                ("", ""),
                ("1 2", "2 1"),
                ("10 20 30", "30 20 10"),
            ],
            "Merge Two Sorted Lists": [
                ("1 2 4\n1 3 4", "1 1 2 3 4 4"),
                ("\n", ""),
                ("1\n", "1"),
                ("1 3\n2 4", "1 2 3 4"),
                ("5\n5", "5 5"),
            ],
            "Add Two Numbers": [
                ("2 4 3\n5 6 4", "7 0 8"),
                ("0\n0", "0"),
                ("1 2 3\n4 5 6", "5 7 9"),
                ("9 9 9\n1", "0 0 0 1"),
                ("1\n9 9", "0 0 1"),
            ],
            "Longest Substring Without Repeating Characters": [
                ("abcabcbb", "3"),
                ("bbbbb", "1"),
                ("pwwkew", "3"),
                ("", "0"),
                ("dvdf", "3"),
            ],
            "Median of Two Sorted Arrays": [
                ("1 3\n2 4", "2.5"),
                ("1 2\n3", "2"),
                ("\n1 2 3", "2"),
                ("1 2 3\n4 5 6", "3.5"),
                ("1\n2", "1.5"),
            ],
            "Regular Expression Matching": [
                ("aa\na*", "true"),
                ("aa\na", "false"),
                ("ab\na*b", "true"),
                ("mississippi\nmis*is*p*.", "false"),
                ("aab\nc*a*b", "true"),
            ],
            "Container With Most Water": [
                ("1 8 6 2 5 4 8 3 7", "49"),
                ("1 1", "1"),
                ("2 3 4 5", "6"),
                ("1 2 1", "2"),
                ("10 9 8 7 6 5 4 3 2 1", "25"),
            ],
            "3Sum": [
                ("-1 0 1 2 -1 -4", "[-1 -1 2] [-1 0 1]"),
                ("0 0 0", "[0 0 0]"),
                ("1 2 3", ""),
                ("-2 0 2 1 -1", "[-2 0 2] [-1 0 1]"),
                ("", ""),
            ],
            "Remove Nth Node From End of List": [
                ("1 2 3 4 5\n2", "1 2 3 5"),
                ("1\n1", ""),
                ("1 2\n1", "1"),
                ("1 2 3\n3", "2 3"),
                ("10 20 30 40\n2", "10 20 40"),
            ],
            "Swap Nodes in Pairs": [
                ("1 2 3 4", "2 1 4 3"),
                ("1", "1"),
                ("", ""),
                ("1 2", "2 1"),
                ("1 2 3", "2 1 3"),
            ],
            "Rotate List": [
                ("1 2 3 4 5\n2", "4 5 1 2 3"),
                ("0 1 2\n4", "2 0 1"),
                ("1\n1", "1"),
                ("", "0"),
                ("1 2\n1", "2 1"),
            ],
            "Reverse Words in a String": [
                ("the sky is blue", "blue is sky the"),
                ("  hello world  ", "world hello"),
                ("a", "a"),
                ("", ""),
                ("  one   word  ", "word one"),
            ],
            "Zigzag Conversion": [
                ("PAYPALISHIRING\n3", "PAHNAPLSIIGYIR"),
                ("PAYPALISHIRING\n4", "PINALSIGYAHRPI"),
                ("A\n1", "A"),
                ("AB\n2", "AB"),
                ("ABCDE\n4", "ABCDE"),
            ],
            "String to Integer (atoi)": [
                ("42", "42"),
                ("   -42", "-42"),
                ("4193 with words", "4193"),
                ("words and 987", "0"),
                ("-91283472332", "-2147483648"),
            ],
            "Integer to Roman": [
                ("3", "III"),
                ("4", "IV"),
                ("9", "IX"),
                ("58", "LVIII"),
                ("1994", "MCMXCIV"),
            ],
            "Roman to Integer": [
                ("III", "3"),
                ("IV", "4"),
                ("IX", "9"),
                ("LVIII", "58"),
                ("MCMXCIV", "1994"),
            ],
            "Longest Common Prefix": [
                ("flower flow flight", "fl"),
                ("dog racecar cat", ""),
                ("interspecies interstellar", "inters"),
                ("", ""),
                ("prefix prefix prefix", "prefix"),
            ],
            "Letter Combinations of a Phone Number": [
                ("23", "ad ae af bd be bf cd ce cf"),
                ("", ""),
                ("2", "a b c"),
                ("7", "p q r s"),
                ("234", "adg adh adi aeg aeh aei afg afh afi bdg bdh bdi beg beh bei bfg bfh bfi cdg cdh cdi ceg ceh cei cfg cfh cfi"),
            ],
            "4Sum": [
                ("1 0 -1 0 -2 2\n0", "[-2 -1 1 2] [-2 0 0 2] [-1 0 0 1]"),
                ("2 2 2 2\n8", "[2 2 2 2]"),
                ("1 2 3 4\n10", "[1 2 3 4]"),
                ("0 0 0 0\n0", "[0 0 0 0]"),
                ("", ""),
            ],
            "Generate Parentheses": [
                ("3", "((())) (()()) (())() ()(()) ()()()"),
                ("1", "()"),
                ("2", "(()) ()()"),
                ("4", "(((()))) ((()())) ((())()) ((()))() (()(())) (()()()) (()())() (())()() ()((())) ()(()()) ()(())() ()()(())) ()()()()"),
                ("0", ""),
            ],
            "Merge k Sorted Lists": [
                ("1 4 5\n1 3 4\n2 6", "1 1 2 3 4 4 5 6"),
                ("", ""),
                ("1\n2\n3", "1 2 3"),
                ("1 2\n3 4", "1 2 3 4"),
                ("5\n5", "5 5"),
            ],
            "Valid Parentheses": [
                ("()[]{}", "true"),
                ("([)]", "false"),
                ("", "true"),
                ("{[}", "false"),
                ("((()))", "true"),
            ],
            "Trapping Rain Water": [
                ("0 1 0 2 1 0 1 3 2 1 2 1", "6"),
                ("4 2 0 3 2 5", "9"),
                ("1 2 1", "1"),
                ("", "0"),
                ("5 5 5 5", "0"),
            ],
            "Jump Game": [
                ("2 3 1 1 4", "true"),
                ("3 2 1 0 4", "false"),
                ("1", "true"),
                ("0", "true"),
                ("2 0 0", "true"),
            ],
            "Merge Intervals": [
                ("1 3\n2 6\n8 10\n15 18", "1 6\n8 10\n15 18"),
                ("1 4\n4 5", "1 5"),
                ("", ""),
                ("1 4", "1 4"),
                ("2 3\n1 4", "1 4"),
            ],
            "Insert Interval": [
                ("1 3\n6 9\n2 5", "1 5\n6 9"),
                ("1 2\n3 5\n6 7\n8 10\n12 16\n4 8", "1 2\n3 10\n12 16"),
                ("", "2 5"),
                ("1 5\n2 3", "1 5"),
                ("1 5\n6 8", "1 5\n6 8"),
            ],
            "Minimum Window Substring": [
                ("ADOBECODEBANC\nABC", "BANC"),
                ("a\na", "a"),
                ("a\nb", ""),
                ("abba\nab", "abba"),
                ("abc\nbc", "bc"),
            ],
            "Sort List": [
                ("4 2 1 3", "1 2 3 4"),
                ("-1 5 3 4 0", "-1 0 3 4 5"),
                ("", ""),
                ("1", "1"),
                ("1 2", "1 2"),
            ],
            "Maximal Rectangle": [
                ("1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0", "6"),
                ("0", "0"),
                ("1", "1"),
                ("1 1\n1 1", "4"),
                ("0 0\n0 0", "0"),
            ],
            "Largest Rectangle in Histogram": [
                ("2 1 5 6 2 3", "10"),
                ("2 4", "4"),
                ("0", "0"),
                ("1 1 1", "3"),
                ("5 5 5 5", "20"),
            ],
            "Binary Tree Maximum Path Sum": [
                ("1 2 3", "6"),
                ("-10 9 20 null null 15 7", "42"),
                ("1", "1"),
                ("-3", "-3"),
                ("2 -1", "2"),
            ],
            "Best Time to Buy and Sell Stock": [
                ("7 1 5 3 6 4", "5"),
                ("7 6 4 3 1", "0"),
                ("1", "0"),
                ("1 2", "1"),
                ("2 1 2 0 1", "1"),
            ],
            "Best Time to Buy and Sell Stock II": [
                ("7 1 5 3 6 4", "7"),
                ("1 2 3 4 5", "4"),
                ("7 6 4 3 1", "0"),
                ("1", "0"),
                ("1 2", "1"),
            ],
            "Jump Game II": [
                ("2 3 1 1 4", "2"),
                ("2 3 0 1 4", "2"),
                ("1", "0"),
                ("2 1", "1"),
                ("3 2 1", "1"),
            ],
            "Unique Paths": [
                ("3\n7", "28"),
                ("3\n2", "3"),
                ("1\n1", "1"),
                ("10\n10", "48620"),
                ("2\n2", "2"),
            ],
            "Minimum Path Sum": [
                ("1 3 1\n1 5 1\n4 2 1", "7"),
                ("1 2\n3 4", "7"),
                ("1", "1"),
                ("1 2 3", "6"),
                ("1\n2\n3", "6"),
            ],
            "Climbing Stairs": [
                ("3", "3"),
                ("2", "2"),
                ("1", "1"),
                ("4", "5"),
                ("5", "8"),
            ],
            "Coin Change": [
                ("1 2 5\n11", "3"),
                ("2\n3", "-1"),
                ("1\n0", "0"),
                ("1 2\n4", "2"),
                ("5\n10", "2"),
            ],
            "Longest Increasing Subsequence": [
                ("10 9 2 5 3 7 101 18", "4"),
                ("0 1 0 3 2 3", "4"),
                ("7 7 7 7 7", "1"),
                ("", "0"),
                ("1", "1"),
            ],
            "Word Break": [
                ("leetcode\nleet code", "true"),
                ("applepenapple\napple pen", "true"),
                ("catsandog\ncats dog sand and", "false"),
                ("a\na", "true"),
                ("", "true"),
            ],
            "Combination Sum": [
                ("2 3 6 7\n7", "2 2 3\n7"),
                ("2 3 5\n8", "2 3 3\n3 5"),
                ("2\n1", ""),
                ("1\n1", "1"),
                ("2 3\n5", "2 3"),
            ],
            "House Robber": [
                ("1 2 3 1", "4"),
                ("2 7 9 3 1", "12"),
                ("", "0"),
                ("1", "1"),
                ("1 2", "2"),
            ],
            "House Robber II": [
                ("2 3 2", "3"),
                ("1 2 3 1", "4"),
                ("1 2 3", "3"),
                ("1", "1"),
                ("", "0"),
            ],
            "Decode Ways": [
                ("12", "2"),
                ("226", "3"),
                ("0", "0"),
                ("06", "0"),
                ("1111", "5"),
            ],
            "Unique Binary Search Trees": [
                ("3", "5"),
                ("1", "1"),
                ("2", "2"),
                ("4", "14"),
                ("5", "42"),
            ],
            "Validate Binary Search Tree": [
                ("2 1 3", "true"),
                ("5 1 4 null null 3 6", "false"),
                ("1", "true"),
                ("5 4 null 3", "false"),
                ("3 1 5 0 2", "true"),
            ],
            "Symmetric Tree": [
                ("1 2 2 3 4 4 3", "true"),
                ("1 2 2 null 3 null 3", "false"),
                ("1", "true"),
                ("", "true"),
                ("1 2 3", "false"),
            ],
            "Binary Tree Level Order Traversal": [
                ("3 9 20 null null 15 7", "3\n9 20\n15 7"),
                ("1", "1"),
                ("", ""),
                ("1 2 3", "1\n2 3"),
                ("1 2 null 3", "1\n2\n3"),
            ],
            "Maximum Depth of Binary Tree": [
                ("3 9 20 null null 15 7", "3"),
                ("1 null 2", "2"),
                ("", "0"),
                ("1", "1"),
                ("1 2 3", "2"),
            ],
            "Construct Binary Tree from Preorder and Inorder Traversal": [
                ("3 9 20 15 7\n9 3 15 20 7", "3 9 20 null null 15 7"),
                ("1\n1", "1"),
                ("1 2\n2 1", "1 2"),
                ("3 1 2 4\n1 2 3 4", "3 1 4 null 2"),
                ("1 2 3\n2 1 3", "1 2 3"),
            ],
            "Lowest Common Ancestor of a Binary Search Tree": [
                ("6 2 8 0 4 7 9 null null 3 5\n2\n8", "6"),
                ("6 2 8 0 4 7 9 null null 3 5\n2\n4", "2"),
                ("2 1\n1\n2", "2"),
                ("3 1 4\n1\n4", "3"),
                ("5 3 6 2 4\n2\n4", "3"),
            ],
            "Balanced Binary Tree": [
                ("3 9 20 null null 15 7", "true"),
                ("1 2 2 3 3 null null 4 4", "false"),
                ("", "true"),
                ("1", "true"),
                ("1 2 null 3", "false"),
            ],
            "Path Sum": [
                ("5 4 8 11 null 13 4 7 2 null null null 1\n22", "true"),
                ("1 2 3\n5", "false"),
                ("", "false"),
                ("1\n1", "true"),
                ("1 2\n3", "true"),
            ],
            "Path Sum II": [
                ("5 4 8 11 null 13 4 7 2 null null 5 1\n22", "5 4 11 2\n5 8 4 5"),
                ("1 2 3\n5", ""),
                ("1 2\n3", "1 2"),
                ("1\n1", "1"),
                ("", ""),
            ],
            "Binary Tree Inorder Traversal": [
                ("1 null 2 3", "1 3 2"),
                ("", ""),
                ("1", "1"),
                ("1 2 3", "2 1 3"),
                ("3 1 2", "1 3 2"),
            ],
            "Sum Root to Leaf Numbers": [
                ("1 2 3", "25"),
                ("4 9 0 5 1", "1026"),
                ("1", "1"),
                ("0", "0"),
                ("4 9 1", "491"),
            ],
            "Flatten Binary Tree to Linked List": [
                ("1 2 5 3 4 null 6", "1 null 2 null 3 null 4 null 5 null 6"),
                ("", ""),
                ("1", "1"),
                ("1 2 null", "1 null 2"),
                ("1 2 3", "1 null 2 null 3"),
            ],
            "Populating Next Right Pointers in Each Node": [
                ("1 2 3 4 5 6 7", "1 # 2 3 # 4 5 6 7 #"),
                ("1", "1 #"),
                ("", ""),
                ("1 2 3", "1 # 2 3 #"),
                ("1 2 3 4 5", "1 # 2 3 # 4 5 #"),
            ],
            "Populating Next Right Pointers in Each Node II": [
                ("1 2 3 4 5 null 7", "1 # 2 3 # 4 5 7 #"),
                ("", ""),
                ("1", "1 #"),
                ("1 2 3", "1 # 2 3 #"),
                ("1 2 null 4", "1 # 2 # 4 #"),
            ],
            "Binary Tree Right Side View": [
                ("1 2 3 null 5 null 4", "1 3 4"),
                ("1 2", "1 2"),
                ("", ""),
                ("1", "1"),
                ("1 2 3 4", "1 3 4"),
            ],
            "Kth Smallest Element in a BST": [
                ("3 1 4 null 2\n1", "1"),
                ("5 3 6 2 4 null null 1\n3", "3"),
                ("1 null 2\n1", "1"),
                ("1\n1", "1"),
                ("3 1 4\n2", "3"),
            ],
            "Lowest Common Ancestor of a Binary Tree": [
                ("3 5 1 6 2 0 8 null null 7 4\n5\n1", "3"),
                ("3 5 1 6 2 0 8 null null 7 4\n5\n4", "5"),
                ("1 2\n1\n2", "1"),
                ("1 2 3\n2\n3", "1"),
                ("3 1 4 null 2\n1\n2", "1"),
            ],
            "Binary Tree Zigzag Level Order Traversal": [
                ("3 9 20 null null 15 7", "3\n20 9\n15 7"),
                ("1", "1"),
                ("", ""),
                ("1 2 3", "1\n3 2"),
                ("1 2 3 4 null null 5", "1\n3 2\n4 5"),
            ],
            "Construct Binary Tree from Inorder and Postorder Traversal": [
                ("9 3 15 20 7\n9 15 7 20 3", "3 9 20 null null 15 7"),
                ("1\n1", "1"),
                ("2 1\n2 1", "1 2"),
                ("1 2 3\n2 3 1", "1 2 3"),
                ("1 3 2\n3 2 1", "1 null 3 null 2"),
            ],
            "Recover Binary Search Tree": [
                ("1 3 null null 2", "3 1 null null 2"),
                ("3 1 4 null null null 2", "3 2 4 null null null 1"),
                ("2 3 1", "2 1 3"),
                ("1 2 null 3", "2 1 null 3"),
                ("4 2 6 1 3 5 7", "4 3 6 1 2 5 7"),
            ],
            "Binary Tree Preorder Traversal": [
                ("1 null 2 3", "1 2 3"),
                ("", ""),
                ("1", "1"),
                ("1 2 3", "1 2 3"),
                ("3 1 2", "3 1 2"),
            ],
            "Binary Tree Postorder Traversal": [
                ("1 null 2 3", "3 2 1"),
                ("", ""),
                ("1", "1"),
                ("1 2 3", "2 3 1"),
                ("3 1 2", "1 2 3"),
            ],
            "Binary Search Tree Iterator": [
                ("7 3 15 null null 9 20", "3 7 9 15 20"),
                ("1", "1"),
                ("3 1 4", "1 3 4"),
                ("5 3 7 1", "1 3 5 7"),
                ("2 1 null null 3", "1 2 3"),
            ],
            "Count Complete Tree Nodes": [
                ("1 2 3 4 5 6", "6"),
                ("", "0"),
                ("1", "1"),
                ("1 2 3", "3"),
                ("1 2 null 4", "3"),
            ],
            "Invert Binary Tree": [
                ("4 2 7 1 3 6 9", "4 7 2 9 6 3 1"),
                ("2 1 3", "2 3 1"),
                ("", ""),
                ("1", "1"),
                ("1 2 null", "1 null 2"),
            ],
            "Kth Largest Element in an Array": [
                ("3 2 1 5 6 4\n2", "5"),
                ("3 2 3 1 2 4 5 5 6\n4", "4"),
                ("1\n1", "1"),
                ("1 1\n1", "1"),
                ("2 1\n2", "1"),
            ],
            "Meeting Rooms": [
                ("0 30\n5 10\n15 20", "false"),
                ("7 10\n2 4", "true"),
                ("", "true"),
                ("1 5", "true"),
                ("1 2\n3 4", "true"),
            ],
            "Meeting Rooms II": [
                ("0 30\n5 10\n15 20", "2"),
                ("7 10\n2 4", "1"),
                ("1 5\n2 3", "2"),
                ("1 2\n3 4", "1"),
                ("", "0"),
            ],
            "Number of Islands": [
                ("11110\n11010\n11000\n00000", "1"),
                ("11000\n11000\n00100\n00011", "3"),
                ("00000\n00000\n00000\n00000", "0"),
                ("1", "1"),
                ("111", "1"),
            ],
            "Clone Graph": [
                ("2 4\n1 3\n2 4\n1 3", "2 4\n1 3\n2 4\n1 3"),
                ("1", "1"),
                ("", ""),
                ("1 2\n1", "1 2\n1"),
                ("1 2 3\n2 3\n1 3", "1 2 3\n2 3\n1 3"),
            ],
            "Course Schedule": [
                ("2\n1 0", "true"),
                ("2\n1 0\n0 1", "false"),
                ("1\n", "true"),
                ("3\n1 0\n2 1", "true"),
                ("4\n1 0\n2 0\n3 1\n3 2", "true"),
            ],
            "Course Schedule II": [
                ("4\n1 0\n2 0\n3 1\n3 2", "0 2 1 3"),
                ("2\n1 0", "0 1"),
                ("2\n1 0\n0 1", ""),
                ("1\n", "0"),
                ("3\n1 0\n2 0", "0 1 2"),
            ],
            "Pacific Atlantic Water Flow": [
                ("1 2 2 3 5\n3 2 3 4 4\n2 4 5 3 1\n6 7 1 4 5\n5 1 1 2 4", "0 4\n1 3\n1 4\n2 2\n3 0\n3 1\n4 0"),
                ("1", "0 0"),
                ("1 2\n3 4", "0 0\n0 1\n1 0\n1 1"),
                ("3 3 3\n3 1 3\n3 3 3", "0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2"),
                ("5 5\n4 4", "0 0\n0 1\n1 0\n1 1"),
            ],
            "Rotting Oranges": [
                ("2 1 1\n1 1 0\n0 1 1", "4"),
                ("2 1 1\n0 1 1\n1 0 1", "-1"),
                ("1", "0"),
                ("0", "0"),
                ("2", "0"),
            ],
            "Surrounded Regions": [
                ("XXXX\nXOOX\nXXOX\nXOXX", "XXXX\nXXXX\nXXXX\nXOXX"),
                ("OOOO\nOOOO\nOOOO\nOOOO", "OOOO\nOOOO\nOOOO\nOOOO"),
                ("X", "X"),
                ("", ""),
                ("XXXX", "XXXX"),
            ],
            "Combination Sum II": [
                ("10 1 2 7 6 1 5\n8", "1 1 6\n1 2 5\n1 7\n2 6"),
                ("2 2 3\n5", "2 3"),
                ("1\n1", "1"),
                ("2\n3", ""),
                ("1 1 1 1\n4", "1 1 1 1"),
            ],
            "Permutations": [
                ("1 2 3", "1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1"),
                ("1", "1"),
                ("1 2", "1 2\n2 1"),
                ("", ""),
                ("1 2 3 4", "1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 2 3\n1 4 3 2\n2 1 3 4\n2 1 4 3\n2 3 1 4\n2 3 4 1\n2 4 1 3\n2 4 3 1\n3 1 2 4\n3 1 4 2\n3 2 1 4\n3 2 4 1\n3 4 1 2\n3 4 2 1\n4 1 2 3\n4 1 3 2\n4 2 1 3\n4 2 3 1\n4 3 1 2\n4 3 2 1"),
            ],
            "Permutations II": [
                ("1 1 2", "1 1 2\n1 2 1\n2 1 1"),
                ("1 1", "1 1"),
                ("1 2", "1 2\n2 1"),
                ("1 1 1", "1 1 1"),
                ("2 2 2 2", "2 2 2 2"),
            ],
            "Subsets": [
                ("1 2 3", "\n1\n2\n1 2\n3\n1 3\n2 3\n1 2 3"),
                ("1", "\n1"),
                ("", ""),
                ("1 2", "\n1\n2\n1 2"),
                ("1 2 3 4", "\n1\n2\n1 2\n3\n1 3\n2 3\n1 2 3\n4\n1 4\n2 4\n1 2 4\n3 4\n1 3 4\n2 3 4\n1 2 3 4"),
            ],
            "Subsets II": [
                ("1 2 2", "\n1\n2\n1 2\n2 2\n1 2 2"),
                ("1 1", "\n1\n1 1"),
                ("1", "\n1"),
                ("", ""),
                ("1 1 1", "\n1\n1 1\n1 1 1"),
            ],
           
        }

        for title, cases in test_case_data.items():
            try:
                problem = Problem.objects.get(title=title)
                for input_data, expected_output in cases:
                    TestCase.objects.create(
                        problem=problem,
                        input_data=input_data,
                        expected_output=expected_output
                    )
                self.stdout.write(self.style.SUCCESS(f"✅ Added {len(cases)} test cases to '{title}'"))
            except Problem.DoesNotExist:
                self.stdout.write(self.style.WARNING(f"⚠️ Problem not found: {title}"))